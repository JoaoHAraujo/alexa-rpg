{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"Environment": {
				"enum": [
					"development",
					"homolog",
					"production"
				],
				"type": "string"
			},
			"IHealthStatus": {
				"properties": {
					"app": {
						"type": "string"
					},
					"uptime": {
						"type": "number",
						"format": "double"
					},
					"now": {
						"type": "string"
					},
					"env": {
						"$ref": "#/components/schemas/Environment"
					},
					"databaseOn": {
						"type": "boolean"
					}
				},
				"required": [
					"app",
					"uptime",
					"now",
					"env"
				],
				"type": "object",
				"additionalProperties": false
			},
			"interfaces.IHttpActionResult": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"TSegmentModel": {
				"properties": {
					"deletedAt": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							}
						]
					},
					"updatedAt": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							}
						]
					},
					"createdAt": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							}
						]
					},
					"isFirst": {
						"type": "boolean"
					},
					"narrative": {
						"type": "string"
					},
					"idStory": {
						"type": "string"
					},
					"id": {
						"type": "string"
					}
				},
				"required": [
					"isFirst",
					"narrative",
					"idStory",
					"id"
				],
				"type": "object"
			},
			"Pick_TSegmentModel.Exclude_keyofTSegmentModel.id-or-createdAt-or-updatedAt-or-deletedAt__": {
				"properties": {
					"idStory": {
						"type": "string"
					},
					"narrative": {
						"type": "string"
					},
					"isFirst": {
						"type": "boolean"
					}
				},
				"required": [
					"idStory",
					"narrative",
					"isFirst"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_TSegmentModel.id-or-createdAt-or-updatedAt-or-deletedAt_": {
				"$ref": "#/components/schemas/Pick_TSegmentModel.Exclude_keyofTSegmentModel.id-or-createdAt-or-updatedAt-or-deletedAt__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"TCreateSegmentInput": {
				"$ref": "#/components/schemas/Omit_TSegmentModel.id-or-createdAt-or-updatedAt-or-deletedAt_"
			},
			"TStoryModel": {
				"properties": {
					"deletedAt": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							}
						]
					},
					"updatedAt": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							}
						]
					},
					"createdAt": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							}
						]
					},
					"isActive": {
						"type": "boolean"
					},
					"title": {
						"type": "string"
					},
					"id": {
						"type": "string"
					}
				},
				"required": [
					"isActive",
					"title",
					"id"
				],
				"type": "object"
			},
			"Pick_TStoryModel.Exclude_keyofTStoryModel.id-or-createdAt-or-updatedAt-or-deletedAt__": {
				"properties": {
					"title": {
						"type": "string"
					},
					"isActive": {
						"type": "boolean"
					}
				},
				"required": [
					"title",
					"isActive"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_TStoryModel.id-or-createdAt-or-updatedAt-or-deletedAt_": {
				"$ref": "#/components/schemas/Pick_TStoryModel.Exclude_keyofTStoryModel.id-or-createdAt-or-updatedAt-or-deletedAt__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"TCreateStoryInput": {
				"$ref": "#/components/schemas/Omit_TStoryModel.id-or-createdAt-or-updatedAt-or-deletedAt_"
			},
			"TUpdateStoryInput": {
				"$ref": "#/components/schemas/Omit_TStoryModel.id-or-createdAt-or-updatedAt-or-deletedAt_"
			}
		},
		"securitySchemes": {
			"token": {
				"type": "apiKey",
				"description": "Token necessario para autenticação",
				"name": "token",
				"in": "cookie"
			}
		}
	},
	"info": {
		"title": "alexa_rpg_backoffice",
		"version": "1.0.0",
		"license": {
			"name": "MIT"
		},
		"contact": {}
	},
	"openapi": "3.0.0",
	"paths": {
		"/v1/health/status": {
			"get": {
				"operationId": "GetStatus",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IHealthStatus"
								}
							}
						}
					}
				},
				"tags": [
					"Health"
				],
				"security": [],
				"parameters": []
			}
		},
		"/v1/health/status/readiness": {
			"get": {
				"operationId": "StatusAll",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/interfaces.IHttpActionResult"
								}
							}
						}
					}
				},
				"tags": [
					"Health"
				],
				"security": [],
				"parameters": []
			}
		},
		"/v1/segment": {
			"post": {
				"operationId": "Create",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TSegmentModel"
								}
							}
						}
					}
				},
				"tags": [
					"Segment"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TCreateSegmentInput"
							}
						}
					}
				}
			}
		},
		"/v1/story": {
			"post": {
				"operationId": "Create",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TStoryModel"
								}
							}
						}
					}
				},
				"tags": [
					"Story"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TCreateStoryInput"
							}
						}
					}
				}
			}
		},
		"/v1/story/random": {
			"get": {
				"operationId": "GetRandom",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/TStoryModel"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"Story"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"default": 5,
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/v1/story/{idStory}": {
			"get": {
				"operationId": "GetById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TStoryModel"
								}
							}
						}
					}
				},
				"tags": [
					"Story"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "idStory",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateStory",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TStoryModel"
								}
							}
						}
					}
				},
				"tags": [
					"Story"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "idStory",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TUpdateStoryInput"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"tags": [
					"Story"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "idStory",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}